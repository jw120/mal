            eval: 'called with' '(def! not (fn* (a) (if a false true)))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
       mal_first: 'called with' '(def! not (fn* (a) (if a false true)))'
            eval: 'macro expanded' '(def! not (fn* (a) (if a false true)))'
       mal_first: 'called with' '(def! not (fn* (a) (if a false true)))'
        mal_rest: 'called with' '(def! not (fn* (a) (if a false true)))'
            eval: 'called with' '(fn* (a) (if a false true))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
       mal_first: 'called with' '(fn* (a) (if a false true))'
            eval: 'macro expanded' '(fn* (a) (if a false true))'
       mal_first: 'called with' '(fn* (a) (if a false true))'
        mal_rest: 'called with' '(fn* (a) (if a false true))'
 fn_special_form: 'in fn* closure body is' '(if a false true)'
            eval: 'called with' '(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) ")))))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  not -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
       mal_first: 'called with' '(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) ")))))'
            eval: 'macro expanded' '(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) ")))))'
       mal_first: 'called with' '(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) ")))))'
        mal_rest: 'called with' '(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) ")))))'
            eval: 'called with' '(fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) "))))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  not -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
       mal_first: 'called with' '(fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) "))))'
            eval: 'macro expanded' '(fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) "))))'
       mal_first: 'called with' '(fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) "))))'
        mal_rest: 'called with' '(fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil) "))))'
 fn_special_form: 'in fn* closure body is' '(eval (read-string (str "(do " (slurp f) "\nnil) ")))'
            eval: 'called with' '(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs)))))))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  load-file -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  not -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
       mal_first: 'called with' '(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs)))))))'
            eval: 'macro expanded' '(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs)))))))'
       mal_first: 'called with' '(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs)))))))'
        mal_rest: 'called with' '(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs)))))))'
            eval: 'called with' '(fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs))))))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  load-file -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  not -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
       mal_first: 'called with' '(fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs))))))'
            eval: 'macro expanded' '(fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs))))))'
       mal_first: 'called with' '(fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs))))))'
        mal_rest: 'called with' '(fn* (& xs) (if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs))))))'
 fn_special_form: 'in fn* closure body is' '(if (> (count xs) 0) (list (quote if) (first xs) (if (> (count xs) 1) (nth xs 1) (throw "odd number of forms to cond")) (cons (quote cond) (rest (rest xs)))))'
environment: core (outer=NULL)
  * -> <function>
  + -> <function>
  - -> <function>
  / -> <function>
  < -> <function>
  <= -> <function>
  = -> <function>
  > -> <function>
  >= -> <function>
  apply -> <function>
  assoc -> <function>
  atom -> <function>
  atom? -> <function>
  concat -> <function>
  cond -> <function>
  cons -> <function>
  contains? -> <function>
  count -> <function>
  deref -> <function>
  dissoc -> <function>
  empty? -> <function>
  false? -> <function>
  first -> <function>
  get -> <function>
  hash-map -> <function>
  keys -> <function>
  keyword -> <function>
  keyword? -> <function>
  list -> <function>
  list? -> <function>
  load-file -> <function>
  map -> <function>
  map? -> <function>
  nil? -> <function>
  not -> <function>
  nth -> <function>
  pr-str -> <function>
  println -> <function>
  prn -> <function>
  read-string -> <function>
  reset! -> <function>
  rest -> <function>
  sequential? -> <function>
  slurp -> <function>
  str -> <function>
  swap! -> <function>
  symbol -> <function>
  symbol? -> <function>
  throw -> <function>
  true? -> <function>
  vals -> <function>
  vector -> <function>
  vector? -> <function>
            eval: 'called with' '(def! *ARGV* (quote ()))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(def! *ARGV* (quote ()))'
            eval: 'macro expanded' '(def! *ARGV* (quote ()))'
       mal_first: 'called with' '(def! *ARGV* (quote ()))'
        mal_rest: 'called with' '(def! *ARGV* (quote ()))'
            eval: 'called with' '(quote ())'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(quote ())'
            eval: 'macro expanded' '(quote ())'
       mal_first: 'called with' '(quote ())'
        mal_rest: 'called with' '(quote ())'
            eval: 'called with' '(load-file "t")'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(load-file "t")'
         env_get: returning load-file <function>
            eval: 'macro expanded' '(load-file "t")'
       mal_first: 'called with' '(load-file "t")'
        mal_rest: 'called with' '(load-file "t")'
            eval: 'called with' 'load-file'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'load-file'
         env_get: returning load-file <function>
            eval: 'called with' '"t"'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '"t"'
       mal_first: 'called with' '(<function> "t")'
        mal_rest: 'called with' '(<function> "t")'
            eval: 'called with' '(eval (read-string (str "(do " (slurp f) "\nnil) ")))'
environment: 2750 (outer=core)
  f -> "t"
       mal_first: 'called with' '(eval (read-string (str "(do " (slurp f) "\nnil) ")))'
         env_get: returning eval <function>
            eval: 'macro expanded' '(eval (read-string (str "(do " (slurp f) "\nnil) ")))'
       mal_first: 'called with' '(eval (read-string (str "(do " (slurp f) "\nnil) ")))'
        mal_rest: 'called with' '(eval (read-string (str "(do " (slurp f) "\nnil) ")))'
            eval: 'called with' 'eval'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' 'eval'
         env_get: returning eval <function>
            eval: 'called with' '(read-string (str "(do " (slurp f) "\nnil) "))'
environment: 2750 (outer=core)
  f -> "t"
       mal_first: 'called with' '(read-string (str "(do " (slurp f) "\nnil) "))'
         env_get: returning read-string <function>
            eval: 'macro expanded' '(read-string (str "(do " (slurp f) "\nnil) "))'
       mal_first: 'called with' '(read-string (str "(do " (slurp f) "\nnil) "))'
        mal_rest: 'called with' '(read-string (str "(do " (slurp f) "\nnil) "))'
            eval: 'called with' 'read-string'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' 'read-string'
         env_get: returning read-string <function>
            eval: 'called with' '(str "(do " (slurp f) "\nnil) ")'
environment: 2750 (outer=core)
  f -> "t"
       mal_first: 'called with' '(str "(do " (slurp f) "\nnil) ")'
         env_get: returning str <function>
            eval: 'macro expanded' '(str "(do " (slurp f) "\nnil) ")'
       mal_first: 'called with' '(str "(do " (slurp f) "\nnil) ")'
        mal_rest: 'called with' '(str "(do " (slurp f) "\nnil) ")'
            eval: 'called with' 'str'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' 'str'
         env_get: returning str <function>
            eval: 'called with' '"(do "'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' '"(do "'
            eval: 'called with' '(slurp f)'
environment: 2750 (outer=core)
  f -> "t"
       mal_first: 'called with' '(slurp f)'
         env_get: returning slurp <function>
            eval: 'macro expanded' '(slurp f)'
       mal_first: 'called with' '(slurp f)'
        mal_rest: 'called with' '(slurp f)'
            eval: 'called with' 'slurp'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' 'slurp'
         env_get: returning slurp <function>
            eval: 'called with' 'f'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' 'f'
         env_get: returning f "t"
       mal_first: 'called with' '(<function> "t")'
        mal_rest: 'called with' '(<function> "t")'
      core_slurp: 'called with' '("t")'
            eval: 'called with' '"\nnil) "'
environment: 2750 (outer=core)
  f -> "t"
            eval: 'macro expanded' '"\nnil) "'
       mal_first: 'called with' '(<function> "(do " "(prn (map (fn* [& args] (list? args)) [1 2]))\n(prn (map (fn* [args] (list? args)) [1 2]))\n(prn (map list? [1 2]))\n(prn (list (fn* [& args] (list? args))))\n\n" "\nnil) ")'
        mal_rest: 'called with' '(<function> "(do " "(prn (map (fn* [& args] (list? args)) [1 2]))\n(prn (map (fn* [args] (list? args)) [1 2]))\n(prn (map list? [1 2]))\n(prn (list (fn* [& args] (list? args))))\n\n" "\nnil) ")'
        core_str: 'called with' '("(do " "(prn (map (fn* [& args] (list? args)) [1 2]))\n(prn (map (fn* [args] (list? args)) [1 2]))\n(prn (map list? [1 2]))\n(prn (list (fn* [& args] (list? args))))\n\n" "\nnil) ")'
       mal_first: 'called with' '(<function> "(do (prn (map (fn* [& args] (list? args)) [1 2]))\n(prn (map (fn* [args] (list? args)) [1 2]))\n(prn (map list? [1 2]))\n(prn (list (fn* [& args] (list? args))))\n\n\nnil) ")'
        mal_rest: 'called with' '(<function> "(do (prn (map (fn* [& args] (list? args)) [1 2]))\n(prn (map (fn* [args] (list? args)) [1 2]))\n(prn (map list? [1 2]))\n(prn (list (fn* [& args] (list? args))))\n\n\nnil) ")'
core_read_string: 'called with' '("(do (prn (map (fn* [& args] (list? args)) [1 2]))\n(prn (map (fn* [args] (list? args)) [1 2]))\n(prn (map list? [1 2]))\n(prn (list (fn* [& args] (list? args))))\n\n\nnil) ")'
       mal_first: 'called with' '(<function> (do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil))'
        mal_rest: 'called with' '(<function> (do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil))'
        mal_eval: 'called with' '((do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil))'
            eval: 'called with' '(do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil)'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil)'
            eval: 'macro expanded' '(do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil)'
       mal_first: 'called with' '(do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil)'
        mal_rest: 'called with' '(do (prn (map (fn* [& args] (list? args)) [1 2])) (prn (map (fn* [args] (list? args)) [1 2])) (prn (map list? [1 2])) (prn (list (fn* [& args] (list? args)))) nil)'
            eval: 'called with' '(prn (map (fn* [& args] (list? args)) [1 2]))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(prn (map (fn* [& args] (list? args)) [1 2]))'
         env_get: returning prn <function>
            eval: 'macro expanded' '(prn (map (fn* [& args] (list? args)) [1 2]))'
       mal_first: 'called with' '(prn (map (fn* [& args] (list? args)) [1 2]))'
        mal_rest: 'called with' '(prn (map (fn* [& args] (list? args)) [1 2]))'
            eval: 'called with' 'prn'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'prn'
         env_get: returning prn <function>
            eval: 'called with' '(map (fn* [& args] (list? args)) [1 2])'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(map (fn* [& args] (list? args)) [1 2])'
         env_get: returning map <function>
            eval: 'macro expanded' '(map (fn* [& args] (list? args)) [1 2])'
       mal_first: 'called with' '(map (fn* [& args] (list? args)) [1 2])'
        mal_rest: 'called with' '(map (fn* [& args] (list? args)) [1 2])'
            eval: 'called with' 'map'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'map'
         env_get: returning map <function>
            eval: 'called with' '(fn* [& args] (list? args))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(fn* [& args] (list? args))'
            eval: 'macro expanded' '(fn* [& args] (list? args))'
       mal_first: 'called with' '(fn* [& args] (list? args))'
        mal_rest: 'called with' '(fn* [& args] (list? args))'
 fn_special_form: 'in fn* closure body is' '(list? args)'
            eval: 'called with' '[1 2]'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '[1 2]'
            eval: 'called with' '1'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '1'
            eval: 'called with' '2'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '2'
       mal_first: 'called with' '(<function> <function> [1 2])'
        mal_rest: 'called with' '(<function> <function> [1 2])'
        core_map: 'called with' '(<function> [1 2])'
        core_map: 'closure body is' '(list? args'
            eval: 'called with' '(list? args)'
environment: e170 (outer=1ad0)
  args -> (1)
       mal_first: 'called with' '(list? args)'
         env_get: returning list? <function>
            eval: 'macro expanded' '(list? args)'
       mal_first: 'called with' '(list? args)'
        mal_rest: 'called with' '(list? args)'
            eval: 'called with' 'list?'
environment: e170 (outer=1ad0)
  args -> (1)
            eval: 'macro expanded' 'list?'
         env_get: returning list? <function>
            eval: 'called with' 'args'
environment: e170 (outer=1ad0)
  args -> (1)
            eval: 'macro expanded' 'args'
         env_get: returning args (1)
       mal_first: 'called with' '(<function> (1))'
        mal_rest: 'called with' '(<function> (1))'
    core_is_list: 'called with' '((1))'
        core_map: 'closure body is' '(list? args'
            eval: 'called with' '(list? args)'
environment: e6e0 (outer=1ad0)
  args -> (2)
       mal_first: 'called with' '(list? args)'
         env_get: returning list? <function>
            eval: 'macro expanded' '(list? args)'
       mal_first: 'called with' '(list? args)'
        mal_rest: 'called with' '(list? args)'
            eval: 'called with' 'list?'
environment: e6e0 (outer=1ad0)
  args -> (2)
            eval: 'macro expanded' 'list?'
         env_get: returning list? <function>
            eval: 'called with' 'args'
environment: e6e0 (outer=1ad0)
  args -> (2)
            eval: 'macro expanded' 'args'
         env_get: returning args (2)
       mal_first: 'called with' '(<function> (2))'
        mal_rest: 'called with' '(<function> (2))'
    core_is_list: 'called with' '((2))'
       mal_first: 'called with' '(<function> (true true))'
        mal_rest: 'called with' '(<function> (true true))'
        core_prn: 'called with' '((true true))'
(true true)
            eval: 'called with' '(prn (map (fn* [args] (list? args)) [1 2]))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(prn (map (fn* [args] (list? args)) [1 2]))'
         env_get: returning prn <function>
            eval: 'macro expanded' '(prn (map (fn* [args] (list? args)) [1 2]))'
       mal_first: 'called with' '(prn (map (fn* [args] (list? args)) [1 2]))'
        mal_rest: 'called with' '(prn (map (fn* [args] (list? args)) [1 2]))'
            eval: 'called with' 'prn'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'prn'
         env_get: returning prn <function>
            eval: 'called with' '(map (fn* [args] (list? args)) [1 2])'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(map (fn* [args] (list? args)) [1 2])'
         env_get: returning map <function>
            eval: 'macro expanded' '(map (fn* [args] (list? args)) [1 2])'
       mal_first: 'called with' '(map (fn* [args] (list? args)) [1 2])'
        mal_rest: 'called with' '(map (fn* [args] (list? args)) [1 2])'
            eval: 'called with' 'map'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'map'
         env_get: returning map <function>
            eval: 'called with' '(fn* [args] (list? args))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(fn* [args] (list? args))'
            eval: 'macro expanded' '(fn* [args] (list? args))'
       mal_first: 'called with' '(fn* [args] (list? args))'
        mal_rest: 'called with' '(fn* [args] (list? args))'
 fn_special_form: 'in fn* closure body is' '(list? args)'
            eval: 'called with' '[1 2]'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '[1 2]'
            eval: 'called with' '1'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '1'
            eval: 'called with' '2'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '2'
       mal_first: 'called with' '(<function> <function> [1 2])'
        mal_rest: 'called with' '(<function> <function> [1 2])'
        core_map: 'called with' '(<function> [1 2])'
        core_map: 'closure body is' '(list? args'
            eval: 'called with' '(list? args)'
environment: ff0 (outer=1ad0)
  args -> 1
       mal_first: 'called with' '(list? args)'
         env_get: returning list? <function>
            eval: 'macro expanded' '(list? args)'
       mal_first: 'called with' '(list? args)'
        mal_rest: 'called with' '(list? args)'
            eval: 'called with' 'list?'
environment: ff0 (outer=1ad0)
  args -> 1
            eval: 'macro expanded' 'list?'
         env_get: returning list? <function>
            eval: 'called with' 'args'
environment: ff0 (outer=1ad0)
  args -> 1
            eval: 'macro expanded' 'args'
         env_get: returning args 1
       mal_first: 'called with' '(<function> 1)'
        mal_rest: 'called with' '(<function> 1)'
    core_is_list: 'called with' '(1)'
        core_map: 'closure body is' '(list? args'
            eval: 'called with' '(list? args)'
environment: 13f0 (outer=1ad0)
  args -> 2
       mal_first: 'called with' '(list? args)'
         env_get: returning list? <function>
            eval: 'macro expanded' '(list? args)'
       mal_first: 'called with' '(list? args)'
        mal_rest: 'called with' '(list? args)'
            eval: 'called with' 'list?'
environment: 13f0 (outer=1ad0)
  args -> 2
            eval: 'macro expanded' 'list?'
         env_get: returning list? <function>
            eval: 'called with' 'args'
environment: 13f0 (outer=1ad0)
  args -> 2
            eval: 'macro expanded' 'args'
         env_get: returning args 2
       mal_first: 'called with' '(<function> 2)'
        mal_rest: 'called with' '(<function> 2)'
    core_is_list: 'called with' '(2)'
       mal_first: 'called with' '(<function> (false false))'
        mal_rest: 'called with' '(<function> (false false))'
        core_prn: 'called with' '((false false))'
(false false)
            eval: 'called with' '(prn (map list? [1 2]))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(prn (map list? [1 2]))'
         env_get: returning prn <function>
            eval: 'macro expanded' '(prn (map list? [1 2]))'
       mal_first: 'called with' '(prn (map list? [1 2]))'
        mal_rest: 'called with' '(prn (map list? [1 2]))'
            eval: 'called with' 'prn'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'prn'
         env_get: returning prn <function>
            eval: 'called with' '(map list? [1 2])'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(map list? [1 2])'
         env_get: returning map <function>
            eval: 'macro expanded' '(map list? [1 2])'
       mal_first: 'called with' '(map list? [1 2])'
        mal_rest: 'called with' '(map list? [1 2])'
            eval: 'called with' 'map'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'map'
         env_get: returning map <function>
            eval: 'called with' 'list?'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'list?'
         env_get: returning list? <function>
            eval: 'called with' '[1 2]'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '[1 2]'
            eval: 'called with' '1'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '1'
            eval: 'called with' '2'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' '2'
       mal_first: 'called with' '(<function> <function> [1 2])'
        mal_rest: 'called with' '(<function> <function> [1 2])'
        core_map: 'called with' '(<function> [1 2])'
    core_is_list: 'called with' '(1)'
    core_is_list: 'called with' '(2)'
       mal_first: 'called with' '(<function> (false false))'
        mal_rest: 'called with' '(<function> (false false))'
        core_prn: 'called with' '((false false))'
(false false)
            eval: 'called with' '(prn (list (fn* [& args] (list? args))))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(prn (list (fn* [& args] (list? args))))'
         env_get: returning prn <function>
            eval: 'macro expanded' '(prn (list (fn* [& args] (list? args))))'
       mal_first: 'called with' '(prn (list (fn* [& args] (list? args))))'
        mal_rest: 'called with' '(prn (list (fn* [& args] (list? args))))'
            eval: 'called with' 'prn'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'prn'
         env_get: returning prn <function>
            eval: 'called with' '(list (fn* [& args] (list? args)))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(list (fn* [& args] (list? args)))'
         env_get: returning list <function>
            eval: 'macro expanded' '(list (fn* [& args] (list? args)))'
       mal_first: 'called with' '(list (fn* [& args] (list? args)))'
        mal_rest: 'called with' '(list (fn* [& args] (list? args)))'
            eval: 'called with' 'list'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'list'
         env_get: returning list <function>
            eval: 'called with' '(fn* [& args] (list? args))'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
       mal_first: 'called with' '(fn* [& args] (list? args))'
            eval: 'macro expanded' '(fn* [& args] (list? args))'
       mal_first: 'called with' '(fn* [& args] (list? args))'
        mal_rest: 'called with' '(fn* [& args] (list? args))'
 fn_special_form: 'in fn* closure body is' '(list? args)'
       mal_first: 'called with' '(<function> <function>)'
        mal_rest: 'called with' '(<function> <function>)'
       core_list: 'called with' '(<function>)'
       mal_first: 'called with' '(<function> (<function>))'
        mal_rest: 'called with' '(<function> (<function>))'
        core_prn: 'called with' '((<function>))'
(<function>)
            eval: 'called with' 'nil'
environment: 1ad0 (outer=core)
  *ARGV* -> ()
            eval: 'macro expanded' 'nil'
